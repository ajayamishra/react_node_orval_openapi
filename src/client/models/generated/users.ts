/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Server
 * OpenAPI spec version: 1.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import { useQuery } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type { UsersShowResponse, UsersIndexResponse } from "./api.schemas";
import { rest } from "msw";
import { faker } from "@faker-js/faker";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary Get User
 */
export const usersShow = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UsersShowResponse>> => {
  return axios.get(`/api/p/users/${id}`, options);
};

export const getUsersShowQueryKey = (id: number) =>
  [`/api/p/users/${id}`] as const;

export const getUsersShowQueryOptions = <
  TData = Awaited<ReturnType<typeof usersShow>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof usersShow>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryOptions<Awaited<ReturnType<typeof usersShow>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersShowQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersShow>>> = ({
    signal,
  }) => usersShow(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type UsersShowQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersShow>>
>;
export type UsersShowQueryError = AxiosError<unknown>;

/**
 * @summary Get User
 */
export const useUsersShow = <
  TData = Awaited<ReturnType<typeof usersShow>>,
  TError = AxiosError<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof usersShow>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUsersShowQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Users
 */
export const usersIndex = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UsersIndexResponse>> => {
  return axios.get(`/api/p/users`, options);
};

export const getUsersIndexQueryKey = () => [`/api/p/users`] as const;

export const getUsersIndexQueryOptions = <
  TData = Awaited<ReturnType<typeof usersIndex>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof usersIndex>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<Awaited<ReturnType<typeof usersIndex>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersIndexQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersIndex>>> = ({
    signal,
  }) => usersIndex({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type UsersIndexQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersIndex>>
>;
export type UsersIndexQueryError = AxiosError<unknown>;

/**
 * @summary Get Users
 */
export const useUsersIndex = <
  TData = Awaited<ReturnType<typeof usersIndex>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof usersIndex>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUsersIndexQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getUsersShowMock = () => ({
  firstName: faker.random.word(),
  lastName: faker.random.word(),
  email: faker.random.word(),
  mobile: faker.random.word(),
  role: faker.random.word(),
});

export const getUsersIndexMock = () => ({
  users: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      firstName: faker.random.word(),
      lastName: faker.random.word(),
      email: faker.random.word(),
      mobile: faker.random.word(),
      role: faker.random.word(),
    })),
    undefined,
  ]),
});

export const getUsersMSW = () => [
  rest.get("*/api/p/users/:id", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getUsersShowMock()),
    );
  }),
  rest.get("*/api/p/users", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getUsersIndexMock()),
    );
  }),
];
